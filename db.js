const sqlite3 = require('sqlite3').verbose();
const fs = require('fs');
const path = require('path');

// р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕е JSON р╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣М
const dataPath = path.join(__dirname, 'dt.json');
const data = JSON.parse(fs.readFileSync(dataPath, 'utf8'));

// р╕кр╕гр╣Йр╕▓р╕Зр╕лр╕гр╕╖р╕нр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е
const dbPath = path.join(__dirname, 'music2.db');
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) return console.error('тЭМ р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н DB р╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И:', err.message);
  console.log('тЬЕ р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е music.db р╣Бр╕ер╣Йр╕з');
});

// р╕кр╕гр╣Йр╕▓р╕Зр╕Хр╕▓р╕гр╕▓р╕Зр╣Гр╕лр╕бр╣Ир╣Бр╕ер╕░р╣Гр╕кр╣Ир╕Вр╣Йр╕нр╕бр╕╣р╕е
db.serialize(() => {
  // р╕ер╕Ър╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕Фр╕┤р╕бр╕Цр╣Йр╕▓р╕бр╕╡
  db.run(`DROP TABLE IF EXISTS songs`);
  db.run(`DROP TABLE IF EXISTS albums`);
  db.run(`DROP TABLE IF EXISTS authors`);

  // р╕Хр╕▓р╕гр╕▓р╕З authors
  db.run(`
    CREATE TABLE authors (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      genre TEXT,
      publisher TEXT
    )
  `);

  // р╕Хр╕▓р╕гр╕▓р╕З albums
  db.run(`
    CREATE TABLE albums (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      release_date TEXT NOT NULL,
      publisher TEXT
    )
  `);

  // р╕Хр╕▓р╕гр╕▓р╕З songs
  db.run(`
    CREATE TABLE songs (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      title TEXT NOT NULL,
      author_id INTEGER,
      album_id INTEGER,
      release_date TEXT NOT NULL,
      FOREIGN KEY (author_id) REFERENCES authors(id),
      FOREIGN KEY (album_id) REFERENCES albums(id)
    )
  `);

  // р╣Ар╕Юр╕┤р╣Ир╕б authors
  const insertAuthor = db.prepare(`INSERT INTO authors (name, genre, publisher) VALUES (?, ?, ?)`);
  data.authors.forEach(author => {
    insertAuthor.run(author.name, author.genre, author.publisher);
  });
  insertAuthor.finalize();

  // р╣Ар╕Юр╕┤р╣Ир╕б albums
  const insertAlbum = db.prepare(`INSERT INTO albums (name, release_date, publisher) VALUES (?, ?, ?)`);
  data.albums.forEach(album => {
    insertAlbum.run(album.name, album.release_date, album.publisher);
  });
  insertAlbum.finalize();

  // р╣Ар╕Юр╕┤р╣Ир╕б songs
  const insertSong = db.prepare(`INSERT INTO songs (title, author_id, album_id, release_date) VALUES (?, ?, ?, ?)`);
  data.songs.forEach(song => {
    insertSong.run(song.title, song.author_id, song.album_id, song.release_date);
  });
  insertSong.finalize();
});

db.close((err) => {
  if (err) return console.error('тЭМ р╕Ыр╕┤р╕Ф DB р╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И:', err.message);
  console.log('ЁЯУж р╕кр╕гр╣Йр╕▓р╕Зр╕Хр╕▓р╕гр╕▓р╕Зр╣Бр╕ер╕░р╣Ар╕Юр╕┤р╣Ир╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з!');
});
